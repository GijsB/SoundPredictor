package soundpredictor;

import LineairAlgebra.Vect;
import speakers.Speaker;
import mappers.SoundMapper;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.ericaro.surfaceplotter.ProgressiveSurfaceModel;

/**
 *
 * @author Gijs
 */
public class MainFrame extends javax.swing.JFrame implements ListSelectionListener{

    private DefaultListModel<Speaker> spk = new DefaultListModel();
    private ProgressiveSurfaceModel model;
    private boolean doNotUpdate = false;
    private List<Speaker> spkClipBoard = new ArrayList();
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();    
        
        model = new ProgressiveSurfaceModel() ;
        grphPnl.setModel(model);
        float stgWdt = (float) stgWdtSpn.getValue();
        model.setXMin(-1*stgWdt/2);
        model.setXMax(stgWdt/2);
        float stgDpt =(float) stgDptSpn.getValue();
        model.setYMin(-1*stgDpt/2);
        model.setYMax(stgDpt/2);
        model.setZMax(9);
        model.setZMin(-24);
        model.setAutoScaleZ(false);
        
        mapPnl.setGraphHeight((float) stgDptSpn.getValue());
        mapPnl.setGraphWidth((float) stgWdtSpn.getValue());
        
        spkLst.addListSelectionListener(this);
        mapPnl.setUberParent(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        outPnl = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        mapPnl = new soundpredictor.JPlotPanel();
        grphPnl = new net.ericaro.surfaceplotter.JSurfacePanel();
        cmdPnl = new javax.swing.JPanel();
        nwSpkBtn = new javax.swing.JButton();
        rmvSpkBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        spkLst = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        recalcBtn = new javax.swing.JButton();
        autCalcBtn = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        polBtn = new javax.swing.JToggleButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        freqSpn = new javax.swing.JSpinner();
        stgWdtSpn = new javax.swing.JSpinner();
        stgDptSpn = new javax.swing.JSpinner();
        xCorSpn = new javax.swing.JSpinner();
        yCorSpn = new javax.swing.JSpinner();
        delSpn = new javax.swing.JSpinner();
        amplSpn = new javax.swing.JSpinner();
        zCorSpn = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        btnPnl = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        menBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenIt = new javax.swing.JMenuItem();
        openMenIt = new javax.swing.JMenuItem();
        savMenIt = new javax.swing.JMenuItem();
        exitMenIt = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        adSpMenIt = new javax.swing.JMenuItem();
        copSpkMenIt = new javax.swing.JMenuItem();
        pasSpkMenIt = new javax.swing.JMenuItem();
        remSpMenIt = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        hlpMenIt = new javax.swing.JMenuItem();
        abMenIt = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SoundPredictor  -  V0.2");

        outPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mapPnl.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mapPnlComponentShown(evt);
            }
        });
        jTabbedPane1.addTab("Map", mapPnl);

        grphPnl.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                grphPnlComponentShown(evt);
            }
        });
        jTabbedPane1.addTab("Response", grphPnl);

        javax.swing.GroupLayout outPnlLayout = new javax.swing.GroupLayout(outPnl);
        outPnl.setLayout(outPnlLayout);
        outPnlLayout.setHorizontalGroup(
            outPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
        );
        outPnlLayout.setVerticalGroup(
            outPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        cmdPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cmdPnl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        nwSpkBtn.setText("New speaker");
        nwSpkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nwSpkBtnActionPerformed(evt);
            }
        });

        rmvSpkBtn.setText("Remove speaker");
        rmvSpkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvSpkBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setAutoscrolls(true);

        spkLst.setModel(spk);
        jScrollPane1.setViewportView(spkLst);

        jLabel1.setText("Field width [m]:");

        jLabel2.setText("Field depth [m]:");

        recalcBtn.setText("Recalculate");
        recalcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalcBtnActionPerformed(evt);
            }
        });

        autCalcBtn.setSelected(true);
        autCalcBtn.setText("Auto-calculate");

        jLabel3.setText("Coordinates [m]:");

        jLabel4.setText("X:");

        jLabel5.setText("Y:");

        jLabel6.setText("Delay [ms]:");

        jLabel7.setText("Polarity:");

        polBtn.setText("Normal");
        polBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                polBtnMouseReleased(evt);
            }
        });

        jLabel9.setText("Freq [Hz]:");

        jLabel10.setText("Ampl [dB]:");

        freqSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(80.0f), Float.valueOf(10.0f), Float.valueOf(10000.0f), Float.valueOf(2.0f)));
        freqSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                freqSpnMouseWheelMoved(evt);
            }
        });
        freqSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                freqSpnStateChanged(evt);
            }
        });

        stgWdtSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(20.0f), Float.valueOf(1.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        stgWdtSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                stgWdtSpnMouseWheelMoved(evt);
            }
        });
        stgWdtSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stgWdtSpnStateChanged(evt);
            }
        });

        stgDptSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(20.0f), Float.valueOf(1.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        stgDptSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                stgDptSpnMouseWheelMoved(evt);
            }
        });
        stgDptSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stgDptSpnStateChanged(evt);
            }
        });

        xCorSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        xCorSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                xCorSpnMouseWheelMoved(evt);
            }
        });
        xCorSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xCorSpnStateChanged(evt);
            }
        });

        yCorSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        yCorSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                yCorSpnMouseWheelMoved(evt);
            }
        });
        yCorSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yCorSpnStateChanged(evt);
            }
        });

        delSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1000.0f), Float.valueOf(1.0f)));
        delSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                delSpnMouseWheelMoved(evt);
            }
        });
        delSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delSpnStateChanged(evt);
            }
        });

        amplSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        amplSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                amplSpnMouseWheelMoved(evt);
            }
        });
        amplSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amplSpnStateChanged(evt);
            }
        });

        zCorSpn.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-100.0f), Float.valueOf(100.0f), Float.valueOf(1.0f)));
        zCorSpn.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                zCorSpnMouseWheelMoved(evt);
            }
        });
        zCorSpn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zCorSpnStateChanged(evt);
            }
        });

        jLabel8.setText("Z:");

        javax.swing.GroupLayout cmdPnlLayout = new javax.swing.GroupLayout(cmdPnl);
        cmdPnl.setLayout(cmdPnlLayout);
        cmdPnlLayout.setHorizontalGroup(
            cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cmdPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cmdPnlLayout.createSequentialGroup()
                        .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(polBtn)
                            .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(cmdPnlLayout.createSequentialGroup()
                                    .addComponent(nwSpkBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rmvSpkBtn)
                                    .addGap(4, 4, 4))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(cmdPnlLayout.createSequentialGroup()
                        .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(freqSpn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(cmdPnlLayout.createSequentialGroup()
                                    .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stgWdtSpn))
                                    .addGap(18, 18, 18)
                                    .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stgDptSpn)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cmdPnlLayout.createSequentialGroup()
                        .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cmdPnlLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cmdPnlLayout.createSequentialGroup()
                                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(delSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(5, 5, 5)
                        .addComponent(jLabel5)
                        .addGap(3, 3, 3)
                        .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cmdPnlLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel10))
                            .addComponent(amplSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(cmdPnlLayout.createSequentialGroup()
                                .addComponent(yCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel8)
                                .addGap(3, 3, 3)
                                .addComponent(zCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cmdPnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cmdPnlLayout.createSequentialGroup()
                        .addComponent(recalcBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(autCalcBtn)
                        .addContainerGap())))
        );
        cmdPnlLayout.setVerticalGroup(
            cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cmdPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stgWdtSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stgDptSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(freqSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nwSpkBtn)
                    .addComponent(rmvSpkBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(xCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zCorSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amplSpn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(cmdPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recalcBtn)
                    .addComponent(autCalcBtn))
                .addContainerGap())
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/New.png"))); // NOI18N
        jButton1.setToolTipText("New project");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save.png"))); // NOI18N
        jButton2.setToolTipText("Save project");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Open.png"))); // NOI18N
        jButton3.setToolTipText("Load project");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Add.png"))); // NOI18N
        jButton4.setToolTipText("Add speaker");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Copy.png"))); // NOI18N
        jButton5.setToolTipText("Copy speaker");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Paste.png"))); // NOI18N
        jButton6.setToolTipText("Paste speaker");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Remove.png"))); // NOI18N
        jButton7.setToolTipText("Remove speaker");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPnlLayout = new javax.swing.GroupLayout(btnPnl);
        btnPnl.setLayout(btnPnlLayout);
        btnPnlLayout.setHorizontalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPnlLayout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnPnlLayout.setVerticalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(btnPnlLayout.createSequentialGroup()
                .addGroup(btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton7)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        newMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/New.png"))); // NOI18N
        newMenIt.setText("New");
        newMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenItActionPerformed(evt);
            }
        });
        jMenu1.add(newMenIt);

        openMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Open.png"))); // NOI18N
        openMenIt.setText("Open");
        openMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenItActionPerformed(evt);
            }
        });
        jMenu1.add(openMenIt);

        savMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save.png"))); // NOI18N
        savMenIt.setText("Save");
        savMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savMenItActionPerformed(evt);
            }
        });
        jMenu1.add(savMenIt);

        exitMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Close.png"))); // NOI18N
        exitMenIt.setText("Exit");
        exitMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenItActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenIt);

        menBar.add(jMenu1);

        jMenu2.setText("Edit");

        adSpMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Add.png"))); // NOI18N
        adSpMenIt.setText("Add speaker");
        adSpMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adSpMenItActionPerformed(evt);
            }
        });
        jMenu2.add(adSpMenIt);

        copSpkMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copSpkMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Copy.png"))); // NOI18N
        copSpkMenIt.setText("Copy speaker");
        copSpkMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copSpkMenItActionPerformed(evt);
            }
        });
        jMenu2.add(copSpkMenIt);

        pasSpkMenIt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasSpkMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Paste.png"))); // NOI18N
        pasSpkMenIt.setText("Paste speaker");
        pasSpkMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasSpkMenItActionPerformed(evt);
            }
        });
        jMenu2.add(pasSpkMenIt);

        remSpMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Remove.png"))); // NOI18N
        remSpMenIt.setText("Remove speaker");
        remSpMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remSpMenItActionPerformed(evt);
            }
        });
        jMenu2.add(remSpMenIt);

        menBar.add(jMenu2);

        jMenu3.setText("Help");

        hlpMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help.png"))); // NOI18N
        hlpMenIt.setText("Help");
        hlpMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlpMenItActionPerformed(evt);
            }
        });
        jMenu3.add(hlpMenIt);

        abMenIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/About.png"))); // NOI18N
        abMenIt.setText("About");
        abMenIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abMenItActionPerformed(evt);
            }
        });
        jMenu3.add(abMenIt);

        menBar.add(jMenu3);

        setJMenuBar(menBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmdPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nwSpkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nwSpkBtnActionPerformed
        Vect spkLoc = new Vect(0,0,0);        
        spk.addElement(new Speaker(spkLoc,0,0));
        contentsChanged();
    }//GEN-LAST:event_nwSpkBtnActionPerformed

    private void rmvSpkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvSpkBtnActionPerformed
        List slct = spkLst.getSelectedValuesList();
        for(int i=0;i<slct.size();i++){
            spk.removeElement(slct.get(i));
        }
        contentsChanged();
    }//GEN-LAST:event_rmvSpkBtnActionPerformed

    private void polBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_polBtnMouseReleased
        if(polBtn.isSelected()){
            polBtn.setText("Inverse");
        }else{
            polBtn.setText("Normal");
        }
        int[] indices = spkLst.getSelectedIndices();
        for (int i=0;i<indices.length;i++){
            spk.get(indices[i]).pol = !polBtn.isSelected();
        }
        if(indices.length>0){
            spk.set(0, spk.get(0));
            contentsChanged();
        }
    }//GEN-LAST:event_polBtnMouseReleased

    private void recalcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalcBtnActionPerformed
        this.updateModel();
    }//GEN-LAST:event_recalcBtnActionPerformed

    private void freqSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_freqSpnStateChanged
        contentsChanged();
    }//GEN-LAST:event_freqSpnStateChanged

    private void stgWdtSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stgWdtSpnStateChanged
        float stgWdt =(float) stgWdtSpn.getValue();
        if(autCalcBtn.isSelected()){
            model.setXMin(-1*stgWdt/2);
            model.setXMax(stgWdt/2);        
            model.plot().execute();                
        }
        mapPnl.setGraphWidth(stgWdt);
    }//GEN-LAST:event_stgWdtSpnStateChanged

    private void stgDptSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stgDptSpnStateChanged
        float stgDpt = (float) stgDptSpn.getValue();
        if(autCalcBtn.isSelected()){
            model.setYMin(-1*stgDpt/2);
            model.setYMax(stgDpt/2);
            model.plot().execute();
            
        }
        mapPnl.setGraphHeight(stgDpt);
    }//GEN-LAST:event_stgDptSpnStateChanged

    private void xCorSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xCorSpnStateChanged
        if(!doNotUpdate){    
            int[] indices = spkLst.getSelectedIndices();
            for(int i=0;i<indices.length;i++){
                spk.get(indices[i]).loc.x =(float) xCorSpn.getValue();
            }
            if(indices.length>0){
                spk.set(0, spk.get(0));
                contentsChanged();
            }
        }
    }//GEN-LAST:event_xCorSpnStateChanged

    private void yCorSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yCorSpnStateChanged
        if(!doNotUpdate){
            int[] indices = spkLst.getSelectedIndices();
            for(int i=0;i<indices.length;i++){
                spk.get(indices[i]).loc.y =(float) yCorSpn.getValue();
            }
            if(indices.length>0){
                spk.set(0, spk.get(0));
                contentsChanged();
            }
        }
    }//GEN-LAST:event_yCorSpnStateChanged

    private void xCorSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_xCorSpnMouseWheelMoved
        xCorSpn.setValue( ((float)xCorSpn.getValue() + (float)(-0.5*evt.getPreciseWheelRotation())));        
    }//GEN-LAST:event_xCorSpnMouseWheelMoved

    private void delSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delSpnStateChanged
        if(!doNotUpdate){    
            int[] indices = spkLst.getSelectedIndices();
            for(int i=0;i<indices.length;i++){
                spk.get(indices[i]).delay =(float) delSpn.getValue();
            }
            if(indices.length>0){
                spk.set(0, spk.get(0));
                contentsChanged();
            }
        }
    }//GEN-LAST:event_delSpnStateChanged

    private void amplSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amplSpnStateChanged
        if(!doNotUpdate){
            int[] indices = spkLst.getSelectedIndices();
            for(int i=0;i<indices.length;i++){
                spk.get(indices[i]).ampl =(float) amplSpn.getValue();
            }
            if(indices.length>0){
                spk.set(0, spk.get(0));
                contentsChanged();
            }
        }
    }//GEN-LAST:event_amplSpnStateChanged

    private void yCorSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_yCorSpnMouseWheelMoved
        yCorSpn.setValue( ((float)yCorSpn.getValue() + (float)(-0.5*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_yCorSpnMouseWheelMoved

    private void delSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_delSpnMouseWheelMoved
        if (((float)delSpn.getValue() + (float)(-0.1*evt.getPreciseWheelRotation()))>0){
            delSpn.setValue( ((float)delSpn.getValue() + (float)(-0.1*evt.getPreciseWheelRotation())));
        }
    }//GEN-LAST:event_delSpnMouseWheelMoved

    private void amplSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_amplSpnMouseWheelMoved
        amplSpn.setValue( ((float)amplSpn.getValue() + (float)(-0.5*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_amplSpnMouseWheelMoved

    private void stgWdtSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_stgWdtSpnMouseWheelMoved
        stgWdtSpn.setValue( ((float)stgWdtSpn.getValue() + (float)(-1*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_stgWdtSpnMouseWheelMoved

    private void stgDptSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_stgDptSpnMouseWheelMoved
        stgDptSpn.setValue( ((float)stgDptSpn.getValue() + (float)(-1*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_stgDptSpnMouseWheelMoved

    private void freqSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_freqSpnMouseWheelMoved
        freqSpn.setValue( ((float)freqSpn.getValue() + (float)(-2*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_freqSpnMouseWheelMoved

    private void exitMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenItActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenItActionPerformed

    private void newMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenItActionPerformed
        spk.removeAllElements();
        contentsChanged();
    }//GEN-LAST:event_newMenItActionPerformed

    private void adSpMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adSpMenItActionPerformed
        this.nwSpkBtnActionPerformed(evt);
    }//GEN-LAST:event_adSpMenItActionPerformed

    private void remSpMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remSpMenItActionPerformed
        this.rmvSpkBtnActionPerformed(evt);
    }//GEN-LAST:event_remSpMenItActionPerformed

    private void abMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abMenItActionPerformed
        (new AboutDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_abMenItActionPerformed

    private void openMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenItActionPerformed
        int retVal = fileChooser.showOpenDialog(this);
        if(retVal == JFileChooser.APPROVE_OPTION){
            FileIO.loadSpeakers(fileChooser.getSelectedFile(),spk);
            contentsChanged();
        }
    }//GEN-LAST:event_openMenItActionPerformed

    private void savMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savMenItActionPerformed
        int retVal = fileChooser.showSaveDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION){
            FileIO.saveSpeakers(spk, fileChooser.getSelectedFile());
        }
    }//GEN-LAST:event_savMenItActionPerformed

    private void hlpMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hlpMenItActionPerformed
        (new HelpDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_hlpMenItActionPerformed

    private void copSpkMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copSpkMenItActionPerformed
        spkClipBoard.removeAll(spkClipBoard);
        int[] indices = spkLst.getSelectedIndices();
        for(int i=0;i<indices.length;i++){
            spkClipBoard.add(spk.get(indices[i]));
        }
    }//GEN-LAST:event_copSpkMenItActionPerformed

    private void pasSpkMenItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasSpkMenItActionPerformed
        
        for(int i=0;i<spkClipBoard.size();i++){
            spk.addElement(spkClipBoard.get(i).clone());
        }
        contentsChanged();
    }//GEN-LAST:event_pasSpkMenItActionPerformed

    private void zCorSpnMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_zCorSpnMouseWheelMoved
        zCorSpn.setValue( ((float)zCorSpn.getValue() + (float)(-0.5*evt.getPreciseWheelRotation())));
    }//GEN-LAST:event_zCorSpnMouseWheelMoved

    private void zCorSpnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zCorSpnStateChanged
        if(!doNotUpdate){    
            int[] indices = spkLst.getSelectedIndices();
            for(int i=0;i<indices.length;i++){
                spk.get(indices[i]).loc.z =(float) zCorSpn.getValue();
            }
            if(indices.length>0){
                spk.set(0, spk.get(0));
                contentsChanged();
            }
        }
    }//GEN-LAST:event_zCorSpnStateChanged

    private void mapPnlComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mapPnlComponentShown
        updateModel();
    }//GEN-LAST:event_mapPnlComponentShown

    private void grphPnlComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_grphPnlComponentShown
        updateModel();
    }//GEN-LAST:event_grphPnlComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        adSpMenItActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        copSpkMenItActionPerformed(evt);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        pasSpkMenItActionPerformed(evt);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        remSpMenItActionPerformed(evt);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the System look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abMenIt;
    private javax.swing.JMenuItem adSpMenIt;
    private javax.swing.JSpinner amplSpn;
    private javax.swing.JToggleButton autCalcBtn;
    private javax.swing.JPanel btnPnl;
    private javax.swing.JPanel cmdPnl;
    private javax.swing.JMenuItem copSpkMenIt;
    private javax.swing.JSpinner delSpn;
    private javax.swing.JMenuItem exitMenIt;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JSpinner freqSpn;
    private net.ericaro.surfaceplotter.JSurfacePanel grphPnl;
    private javax.swing.JMenuItem hlpMenIt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private soundpredictor.JPlotPanel mapPnl;
    private javax.swing.JMenuBar menBar;
    private javax.swing.JMenuItem newMenIt;
    private javax.swing.JButton nwSpkBtn;
    private javax.swing.JMenuItem openMenIt;
    private javax.swing.JPanel outPnl;
    private javax.swing.JMenuItem pasSpkMenIt;
    private javax.swing.JToggleButton polBtn;
    private javax.swing.JButton recalcBtn;
    private javax.swing.JMenuItem remSpMenIt;
    private javax.swing.JButton rmvSpkBtn;
    private javax.swing.JMenuItem savMenIt;
    public javax.swing.JList spkLst;
    private javax.swing.JSpinner stgDptSpn;
    private javax.swing.JSpinner stgWdtSpn;
    public javax.swing.JSpinner xCorSpn;
    public javax.swing.JSpinner yCorSpn;
    private javax.swing.JSpinner zCorSpn;
    // End of variables declaration//GEN-END:variables

    public void contentsChanged(){
        if (autCalcBtn.isSelected()){
            updateModel();
        }
    }
    

    
    private void updateModel(){
        System.out.println("Model updated");
        Object[] obj = spk.toArray();
        float freq = (Float) freqSpn.getModel().getValue();        

        Speaker[] s = new Speaker[obj.length];
        for (int i=0;i<obj.length;i++){
            s[i] = (Speaker) obj[i];
        }
        if(jTabbedPane1.getSelectedComponent().equals(mapPnl)){
            mapPnl.setSpeakers(s);
        }else if(jTabbedPane1.getSelectedComponent().equals(grphPnl)){
            SoundMapper m = new SoundMapper(s,freq);

            float stgDpt = (float) stgDptSpn.getValue();
            model.setYMin(-1*stgDpt/2);
            model.setYMax(stgDpt/2);

            float stgWdt = (float) stgWdtSpn.getValue();
            model.setXMin(-1*stgWdt/2);
            model.setXMax(stgWdt/2);

            model.setMapper(m);
            model.plot().execute();
        }
    }
    
    /**
     * This method is called when the selection of the speaker list changes
     * @param lse 
     */
    @Override
    public void valueChanged(ListSelectionEvent lse) {
        Speaker tempSpk = (Speaker) spkLst.getSelectedValue();
        
        if(tempSpk != null){
            doNotUpdate = true;
            xCorSpn.setValue( tempSpk.loc.x);
            yCorSpn.setValue( tempSpk.loc.y);
            zCorSpn.setValue( tempSpk.loc.z);
            delSpn.setValue( tempSpk.delay);
            amplSpn.setValue( tempSpk.ampl);
            
            polBtn.setSelected(!tempSpk.pol);
            if(!tempSpk.pol){
                polBtn.setText("Inverse");
            }else{
                polBtn.setText("Normal");
            }
            doNotUpdate = false;
        }else{
            doNotUpdate = true;
            xCorSpn.setValue(0f);
            yCorSpn.setValue(0f);
            zCorSpn.setValue(0f);
            delSpn.setValue(0f);
            amplSpn.setValue(0f);
            polBtn.setSelected(false);
            polBtn.setText("Normal");
            doNotUpdate = false;
        }
        
        for (int i=0;i<spk.size();i++){
            spk.get(i).selected = spkLst.isSelectedIndex(i);
        }
        mapPnl.repaintGraph();
        
    }
    
    public JList getList(){
        return spkLst;
    }
    
    public JSpinner getXSpin(){
        return xCorSpn;
    }
    
    public JSpinner getYSpin(){
        return yCorSpn;
    }
}
